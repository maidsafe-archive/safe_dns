initSidebarItems({"enum":[["Error","Error types."]],"fn":[["deserialise","Parse a data type from an encoded message from a sender whose public key we know.  Success ensures the message was from the holder of the private key related to the public key we know of the sender."],["gen_keypair","`gen_keypair()` randomly generates a secret key and a corresponding public key."],["pre_computed_deserialise","Parse a data type from an encoded message from a sender whose public key we know, and which is pre-computed.  This is less CPU-intensive than `deserialise()` which can be useful if many messages are to be transferred.  Success ensures the message was from the holder of the private key related to the public key we know of the sender."],["pre_computed_serialise","Prepare an encodable data element for transmission to another process whose public key we know, and which is pre-computed.  This is less CPU-intensive than `serialise()` which can be useful if many messages are to be transferred."],["precompute","`precompute()` computes an intermediate key that can be used by `seal_precomputed()` and `open_precomputed()`"],["serialise","Prepare an encodable data element for transmission to another process whose public key we know."]],"struct":[["PrecomputedKey","Applications that send several messages to the same receiver can gain speed by splitting `seal()` into two steps, `precompute()` and `seal_precomputed()`. Similarly, applications that receive several messages from the same sender can gain speed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`."],["PublicKey","`PublicKey` for asymmetric authenticated encryption"],["SecretKey","`SecretKey` for asymmetric authenticated encryption"]]});